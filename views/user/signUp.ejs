<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Sign Up</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.2/css/bootstrap.min.css" rel="stylesheet">
    <style>
        body {
            background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
            min-height: 100vh;
            margin: 0;
            padding: 2rem;
            display: flex;
            justify-content: center;
            align-items: center;
        }

        .signup-container {
            background: white;
            border-radius: 20px;
            box-shadow: 20px 20px 60px #bebebe, -20px -20px 60px #ffffff;
            width: 100%;
            max-width: 1000px;
            display: flex;
            overflow: hidden;
            animation: slideUp 0.5s ease forwards;
        }

        .image-side {
            width: 40%;
            background: linear-gradient(45deg, #6c5ce7, #a8a4e6);
            padding: 2rem;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .image-side img {
            width: 100%;
            height: auto;
            object-fit: cover;
            border-radius: 10px;
            box-shadow: 0 8px 16px rgba(0, 0, 0, 0.1);
        }

        .form-side {
            width: 60%;
            padding: 3rem;
            background: white;
        }

        @keyframes slideUp {
            from {
                transform: translateY(20px);
                opacity: 0;
            }

            to {
                transform: translateY(0);
                opacity: 1;
            }
        }

        .signup-header {
            text-align: center;
            margin-bottom: 2rem;
        }

        .signup-header h1 {
            color: #2d3436;
            font-size: 1.75rem;
            font-weight: 600;
            margin-bottom: 0.5rem;
        }

        .form-floating {
            margin-bottom: 1.25rem;
        }

        .form-control {
            border-radius: 10px;
            border: 2px solid #eee;
            padding: 0.75rem;
            transition: all 0.3s ease;
            height: 3.5rem;
        }

        .form-control:focus {
            border-color: #6c5ce7;
            box-shadow: 0 0 0 0.2rem rgba(108, 92, 231, 0.1);
        }

        .btn-primary {
            background: #6c5ce7;
            border: none;
            border-radius: 10px;
            padding: 0.75rem;
            width: 100%;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 1px;
            transition: all 0.3s ease;
        }

        .error-message {
            color: red;
            font-size: 0.75rem;
            margin-top: 5px;
        }

        .btn-primary:hover {
            background: #5b4bc4;
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(108, 92, 231, 0.4);
        }




        @media (max-width: 768px) {
            body {
                padding: 1rem;
            }

            .signup-container {
                flex-direction: column;
            }

            .image-side {
                width: 100%;
                padding: 1rem;
            }

            .form-side {
                width: 100%;
                padding: 2rem 1.5rem;
            }

            .error-message {
                font-size: 0.85rem;
            }

        }
    </style>
</head>

<body>
    <div class="signup-container">
        <div class="image-side">
            <img src="/images/user.jpeg" alt="Admin">
        </div>

        <div class="form-side">
            <div class="signup-header">
                <h1>Create Account</h1>
                <p class="text-muted">Please fill in your details to get started</p>
            </div>

            <form id="signupForm" method="post" action="/signup">
                <div class="row">
                    <div class="col-md">
                        <div class="form-floating">
                            <input type="text" class="form-control" id="nameInput" name="name" placeholder="Name"
                                required>
                            <label for="nameInput">Full Name</label>
                        </div>
                        <!-- dynamic error showing div  -->
                        <div id="errorName" class="error-message">
                        </div>
                    </div>
                </div>

                <div class="form-floating">
                    <input type="email" name="email" class="form-control" id="emailInput" placeholder="name@example.com"
                        required>
                    <label for="emailInput">Email address</label>
                    <!-- dynamic error showing div  -->
                    <div id="errorEmail" class="error-message">

                    </div>
                </div>

                <div class="form-floating">
                    <input type="text" name="phone" class="form-control" id="phoneInput" placeholder="phone" required>
                    <label for="phone">Contact Number</label>
                    <!-- dynamic error showing div  -->
                    <div id="errorPhone" class="error-message">

                    </div>
                </div>

                <div class="form-floating position-relative">
                    <input type="password" name="password" class="form-control" id="passwordInput"
                        placeholder="Password" required>
                    <label for="passwordInput">Password</label>
                    <!-- dynamic error showing div  -->
                    <div id="errorPassword" class="error-message">

                    </div>
                </div>

                <div class="form-floating position-relative">
                    <input type="Password" name="cPassword" class="form-control" id="cPasswordInput"
                        placeholder="Confirm Password" required>
                    <label for="confirmPasswordInput">Confirm Password</label>
                    <!-- dynamic error showing div  -->
                    <div id="errorCpassword" class="error-message">

                    </div>
                </div>

                <button type="submit" class="btn btn-primary">
                    Create Account
                </button>

                <div class="mt-3 text-center">
                    Already have an account? <a href="/signin" class="text-decoration-none">Sign In</a>
                </div>
            </form>
        </div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.2/js/bootstrap.bundle.min.js"></script>
    <script>
        // Form elements
        const nameId = document.getElementById('nameInput');
        const emailId = document.getElementById('emailInput');
        const phoneId = document.getElementById('phoneInput');
        const passwordId = document.getElementById('passwordInput');
        const confirmPasswordId = document.getElementById('cPasswordInput');

        // Error elements
        const errorName = document.getElementById('errorName');
        const errorEmail = document.getElementById('errorEmail');
        const errorPhone = document.getElementById('errorPhone');
        const errorPassword = document.getElementById('errorPassword');
        const errorCpassword = document.getElementById('errorCpassword');

        const signupForm = document.getElementById('signupForm');

        function nameValidateChecking() {
            const nameval = nameId.value.trim();
            const namePattern = /^[A-Za-z\s]{3,30}$/;

            if (nameval === '') {
                errorName.innerHTML = 'Name cannot be empty';
                return false;
            } else if (!namePattern.test(nameval)) {
                errorName.innerHTML = 'Name should be 3-30 characters and contain only letters';
                return false;
            } else {
                errorName.innerHTML = '';
                return true;
            }
        }

        function emailValidateChecking() {
            const emailval = emailId.value.trim();
            const emailPattern = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;

            if (emailval === '') {
                errorEmail.innerHTML = 'Email cannot be empty';
                return false;
            } else if (!emailPattern.test(emailval)) {
                errorEmail.innerHTML = 'Please enter a valid email address';
                return false;
            } else {
                errorEmail.innerHTML = '';
                return true;
            }
        }

        function phoneValidateChecking() {
            const phoneval = phoneId.value.trim();
            const phonePattern = /^\d{10}$/;

            if (phoneval === '') {
                errorPhone.innerHTML = 'Phone number cannot be empty';
                return false;
            } else if (!phonePattern.test(phoneval)) {
                errorPhone.innerHTML = 'Please enter a valid 10-digit phone number';
                return false;
            } else {
                errorPhone.innerHTML = '';
                return true;
            }
        }

        function passValidateChecking() {
            const passwordval = passwordId.value;
            const confirmval = confirmPasswordId.value;
            const passwordPattern = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$/;

            // Password validation
            if (passwordval === '') {
                errorPassword.innerHTML = 'Password cannot be empty';
                return false;
            } else if (!passwordPattern.test(passwordval)) {
                errorPassword.innerHTML = 'Password must be at least 8 characters and include uppercase, lowercase, number and special character';
                return false;
            } else {
                errorPassword.innerHTML = '';
            }

            // Confirm password validation
            if (confirmval === '') {
                errorCpassword.innerHTML = 'Please confirm your password';
                return false;
            } else if (passwordval !== confirmval) {
                errorCpassword.innerHTML = 'Passwords do not match';
                return false;
            } else {
                errorCpassword.innerHTML = '';
                return true;
            }
        }

        // Real-time validation
        nameId.addEventListener('input', nameValidateChecking);
        emailId.addEventListener('input', emailValidateChecking);
        phoneId.addEventListener('input', phoneValidateChecking);
        passwordId.addEventListener('input', passValidateChecking);
        confirmPasswordId.addEventListener('input', passValidateChecking);

        // Form submission
        document.addEventListener('DOMContentLoaded', function () {
            signupForm.addEventListener('submit', async function (e) {
                e.preventDefault(); // Always prevent default to handle submission manually

                // Check if all elements exist
                if (!nameId || !emailId || !phoneId || !passwordId || !confirmPasswordId ||
                    !errorName || !errorEmail || !errorPhone || !errorPassword || !errorCpassword || !signupForm) {
                    console.error('One or more elements not found');
                    return;
                }

                // Perform all client-side validations first
                const isNameValid = nameValidateChecking();
                const isEmailValid = emailValidateChecking();
                const isPhoneValid = phoneValidateChecking();
                const isPasswordValid = passValidateChecking();

                // Only proceed with server request if client-side validation passes
                if (isNameValid && isEmailValid && isPhoneValid && isPasswordValid) {
                    try {
                        const formData = {
                            name: nameId.value.trim(),
                            email: emailId.value.trim(),
                            phone: phoneId.value.trim(),
                            password: passwordId.value
                        };

                        const response = await fetch('/signup', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify(formData)
                        });

                        const data = await response.json();

                        if (data.status === 'error') {
                            // Handle server-side validation errors
                            switch (data.field) {
                                case 'name':
                                    errorName.innerHTML = data.message;
                                    break;
                                case 'email':
                                    errorEmail.innerHTML = data.message;
                                    break;
                                case 'phone':
                                    errorPhone.innerHTML = data.message;
                                    break;
                                default:
                                    // Show general errors in an alert
                                    alert(data.message);
                            }
                        } else if (data.status === 'success') {
                            // Optional: Show success message before redirect
                            alert('Signup successful!');
                            window.location.href = data.redirect || '/signin';
                        }
                    } catch (error) {
                        console.error('Error during signup:', error);
                        alert('An error occurred during signup. Please try again.');
                    }
                }
            });
        });



    </script>
</body>

</html>